---
title: "Connecting duckdb"
author: "Carmen Hoyt"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(DBI)
library(duckdb)
```

Let's connect to our database

```{r}
conn <- DBI::dbConnect(duckdb::duckdb(), dbdir="moorea-LTER.db")
```

Let's look at our tables

```{r}
DBI::dbListTables(conn)
```

Look at an entire table

```{r}
Abundance <- tbl(conn, "Abundance")
Abundance
```

## Let's do our first query

```{r}
site_1 <- dbGetQuery(conn, "SELECT * FROM Abundance WHERE site LIKE '%01'")
```

#### There is a better way

```{r}
library(dbplyr)
```

```{r}
Abundance %>% 
  filter(habitat == "Backreef") %>% 
  select(year, a_planci_counts) %>% 
  show_query()
```

```{r}
# This will return a lazy query on a portion of the database
species_b <- species %>% 
  filter(Relevance == "Study Species") %>% 
  select(Code, Scientific_name)
```

```{r}
class(species_b)
dim(species_b)
```

### Can I group?

```{r}
species %>% 
  group_by(Relevance) %>% 
  summarize(num_species = n())
```

### You can also mutate

```{r}
species %>% 
  mutate(Code_x = paste0("X", Code)) %>% 
  show_query()
```

## How do we get the full data

```{r}
species_X <- species %>% 
  mutate(Code_x = paste0("X", Code)) %>% 
  # Need to use `collect()` in order to actually return all of the applicable data on the database
  collect()
```

## You can do joins!!

```{r}
eggs_db <- tbl(conn, "Bird_eggs")
nests_db <- tbl(conn, "Bird_nests")

nest_join <- left_join(nests_db, eggs_db, by = "Nest_ID", keep=FALSE) %>% 
  collect()
```

## Don't forget to close the database connection

```{r}
DBI::dbDisconnect(conn, shutdown = TRUE)
```
